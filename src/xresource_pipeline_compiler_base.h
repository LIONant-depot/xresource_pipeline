namespace xresource_pipeline::compiler
{
    //------------------------------------------------------------
    //
    // Compilers expect a specific folder format and naming of assets.
    //      Master Directory                                    // This is the directory which should contain all the projects for the engine (Can be named anything)
    //      + Compiled.dbase                                    // All resources that are compiled for any project end up in this directory (Note that everything in this directory is generated)
    //          + Resources                                     // Top folder indicating that all the compiled resources will be inside here
    //              + (Type of Project Guid)                    // Particular types of projects "library", "Project", "Plugins", etc... ((guid))
    //                  + (Instance_guid)                       // Particular Instance of the libary or project ((guid))
    //                      + Logs.base                         // Different logs generated by the compiler
    //                          + Resource_Type_Guid            // Which resource type are we dealing with
    //                              + Resource_Instance_Guid    // folder of the particular resource
    //                      + Windows.platform                  // Resources that are compiled for the windows platform
    //                          + Data                          // Inside here you will find the final resources with their full guids in a flat list
    //                      + Generated.base                    // Temporary generated assets which are then compiled into the platform specific directories
    //                          + Resource_Type_Guid            // Different types of resources
    //                              +Resource_Instance_Guid     // Instance of a resource
    //      + Projects.dbase                                    // Here is where all the projects created in this system will be 
    //          + Resources                                     // Used to indicate that below here are the actual projects
    //              + Apps@(Type of Project Guid)               // Particular types of projects "library", "Project", "Plugins", etc... ((guid))
    //                  + (Instance Guid)                       // This is a particular instance of a Library or project, etc.. ((guid))
    //                      + Resources                         // This is where we will have a list of resource files that required compilation
    //                          +(Resource_type_guid)           // Particular resource types (textures, meshes, etc)
    //                              + Resource_Instance_Guid    // A particular resource Instance guid which requires compilation
    //      + Resource.pipeline                                 // Main directory for the installed resources pipelines
    //          + Compilers                                     // Location for the compilers
    //              + ( Resource Type Guid )                    // Resource types
    //                  + Debug                                 // Debug compilers used for development and debugging issues
    //                  + Release                               // Here are the standard compilers
    //                  * DefaultSettings.txt                   // The default settings for the compilers
    //                  * DefaultIcon.dds                       // Icon for the editor and such
    //          * Configuration.txt                             // Configuration of the pipeline contains a map between compilers guids and names
    //      + Lion.app                                          // Core library contains all the cpp files here
    //                                                          //
    // Note that this system does not deal with the source assets. Those should be located in a different set of directories usually managed by artist 
    // 
    // Types of Projects Naming Convention
    // ------------------------------------
    //  Apps@1232134.2342343
    //  Plugin@4234324.2342343
    //  ResourceLibrary@4234324.2342343
    // 
    // Project
    // Types of Resources
    // 
    // A resource is fully identified using their full_guids. These full guids contains: (Asset_type_guid) + (Asset_Instance_Guid)
    // So they are a total of 128bits.
    //
    class base
    {
    public:
        
        using imported_file_fn = xcore::func< void( const xcore::cstring& FilePath ) >;

        enum class build_type
        { INVALID
        , O0                // Compiles the asset as fast as possible no real optimization
        , O1                // Build with optimizations
        , Oz                // Take all the time you like to optimize this resource
        };
            
        struct platform
        {
            bool                    m_bValid            { false };                              // If we need to build for this platform
            xcore::target::platform m_Platform          { xcore::target::platform::WINDOWS };   // Platform that we need to compile for
            xcore::cstring          m_CompiledBinPath   {};                                     // This is where the compiler need to drop all the compiled data
            xcore::file::stream     m_LogFile           {};
        };

    public:
        
        virtual                                        ~base                        ( void )                                                        noexcept = default;
                                                        base                        ( void )                                                        noexcept;
                            xcore::err                  Compile                     ( void )                                                        noexcept;
                            xcore::err                  Parse                       ( int argc, const char* argv[] )                                noexcept;

    protected:
        
                            xcore::err                  InternalParse               ( const int argc, const char *argv[] )                          noexcept;
                            xcore::cstring              getDestinationPath          ( xcore::target::platform p )                           const   noexcept;

        virtual             xcore::err                  onCompile                   ( void )                                                        noexcept = 0;

    protected:
        
        build_type                                              m_BuildType             {};
        std::chrono::steady_clock::time_point                   m_Timmer                {};
        xcore::cstring                                          m_LibraryPath           {}; // Where is the project located
        xcore::cstring                                          m_AssetPath             {}; // Path to the asset 
        xcore::guid::rcfull<>                                   m_RscGuid               {}; // GUID of the resource
        xcore::guid::rcfull<>                                   m_LibraryGuid           {}; // GUID of the library or project that has the asset
        xcore::cstring                                          m_QLionPath             {}; // QLion Path
        xcore::cstring                                          m_CompiledPath          {}; // Compiled asset path for the given project/library
        xcore::cstring                                          m_ExternalAssetsPath    {};
        xcore::cstring                                          m_LogsPath              {};
        xcore::file::stream                                     m_LogFile               {};
        std::array<platform, xcore::target::getPlatformCount()> m_Target                {};
        xcore::log::channel                                     m_LogChannel            { "COMPILER" };

    protected:

        friend void LogFunction(const xcore::log::channel& Channel, xcore::log::msg_type Type, const char* String, int Line, const char* file) noexcept;
    };
}
